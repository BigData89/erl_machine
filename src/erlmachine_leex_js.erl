-file("/usr/local/Cellar/erlang/22.0.2/lib/erlang/lib/parsetools-2.1.8/include/leexinc.hrl", 0).
%% The source of this file is part of leex distribution, as such it
%% has the same Copyright as the other files in the leex
%% distribution. The Copyright is defined in the accompanying file
%% COPYRIGHT. However, the resultant scanner generated by leex is the
%% property of the creator of the scanner and is not covered by that
%% Copyright.

-module(erlmachine_leex_js).

-export([string/1,string/2,token/2,token/3,tokens/2,tokens/3]).
-export([format_error/1]).

%% User code. This is placed here to allow extra attributes.
-file("src/compiler/erlmachine_leex_js.xrl", 166).

operator(ID, TokenLine) -> io:format("~nOperator: ~p~n",[ID]), {token, {ID, TokenLine}}.

null(TokenLine) -> io:format("~nnull~n"), {token, {'null', TokenLine}}.

bool("true", TokenLine) -> io:format("~ntrue~n"), {token, {'true', TokenLine}};
bool("false", TokenLine) -> io:format("~nfalse~n"), {token, {'false', TokenLine}}.

float(TokenChars, TokenLine) -> io:format("~nFloat: ~p~n",[TokenChars]), {token, {erlang:list_to_float(TokenChars), TokenLine}}.

integer(TokenChars, TokenLine) -> io:format("~nInteger: ~p~n",[TokenChars]), {token, {erlang:list_to_integer(TokenChars), TokenLine}}.

hexinteger([_, _|TokenChars], TokenLine) -> io:format("~nhexinteger: ~p~n",[TokenChars]), {token, {erlang:list_to_integer(TokenChars, 16), TokenLine}}.
binaryinteger([_, _|TokenChars], TokenLine) -> io:format("~nbinaryinteger: ~p~n",[TokenChars]), {token, {erlang:list_to_integer(TokenChars, 2), TokenLine}}.
octalinteger([_,_|TokenChars], TokenLine) -> io:format("~noctalinteger: ~p~n",[TokenChars]), {token, {erlang:list_to_integer(TokenChars, 8), TokenLine}}.


skip() -> skip_token.

-file("/usr/local/Cellar/erlang/22.0.2/lib/erlang/lib/parsetools-2.1.8/include/leexinc.hrl", 14).

format_error({illegal,S}) -> ["illegal characters ",io_lib:write_string(S)];
format_error({user,S}) -> S.

string(String) -> string(String, 1).

string(String, Line) -> string(String, Line, String, []).

%% string(InChars, Line, TokenChars, Tokens) ->
%% {ok,Tokens,Line} | {error,ErrorInfo,Line}.
%% Note the line number going into yystate, L0, is line of token
%% start while line number returned is line of token end. We want line
%% of token start.

string([], L, [], Ts) ->                     % No partial tokens!
    {ok,yyrev(Ts),L};
string(Ics0, L0, Tcs, Ts) ->
    case yystate(yystate(), Ics0, L0, 0, reject, 0) of
        {A,Alen,Ics1,L1} ->                  % Accepting end state
            string_cont(Ics1, L1, yyaction(A, Alen, Tcs, L0), Ts);
        {A,Alen,Ics1,L1,_S1} ->              % Accepting transistion state
            string_cont(Ics1, L1, yyaction(A, Alen, Tcs, L0), Ts);
        {reject,_Alen,Tlen,_Ics1,L1,_S1} ->  % After a non-accepting state
            {error,{L0,?MODULE,{illegal,yypre(Tcs, Tlen+1)}},L1};
        {A,Alen,Tlen,_Ics1,L1,_S1} ->
            Tcs1 = yysuf(Tcs, Alen),
            L2 = adjust_line(Tlen, Alen, Tcs1, L1),
            string_cont(Tcs1, L2, yyaction(A, Alen, Tcs, L0), Ts)
    end.

%% string_cont(RestChars, Line, Token, Tokens)
%% Test for and remove the end token wrapper. Push back characters
%% are prepended to RestChars.

-dialyzer({nowarn_function, string_cont/4}).

string_cont(Rest, Line, {token,T}, Ts) ->
    string(Rest, Line, Rest, [T|Ts]);
string_cont(Rest, Line, {token,T,Push}, Ts) ->
    NewRest = Push ++ Rest,
    string(NewRest, Line, NewRest, [T|Ts]);
string_cont(Rest, Line, {end_token,T}, Ts) ->
    string(Rest, Line, Rest, [T|Ts]);
string_cont(Rest, Line, {end_token,T,Push}, Ts) ->
    NewRest = Push ++ Rest,
    string(NewRest, Line, NewRest, [T|Ts]);
string_cont(Rest, Line, skip_token, Ts) ->
    string(Rest, Line, Rest, Ts);
string_cont(Rest, Line, {skip_token,Push}, Ts) ->
    NewRest = Push ++ Rest,
    string(NewRest, Line, NewRest, Ts);
string_cont(_Rest, Line, {error,S}, _Ts) ->
    {error,{Line,?MODULE,{user,S}},Line}.

%% token(Continuation, Chars) ->
%% token(Continuation, Chars, Line) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.
%% Must be careful when re-entering to append the latest characters to the
%% after characters in an accept. The continuation is:
%% {token,State,CurrLine,TokenChars,TokenLen,TokenLine,AccAction,AccLen}

token(Cont, Chars) -> token(Cont, Chars, 1).

token([], Chars, Line) ->
    token(yystate(), Chars, Line, Chars, 0, Line, reject, 0);
token({token,State,Line,Tcs,Tlen,Tline,Action,Alen}, Chars, _) ->
    token(State, Chars, Line, Tcs ++ Chars, Tlen, Tline, Action, Alen).

%% token(State, InChars, Line, TokenChars, TokenLen, TokenLine,
%% AcceptAction, AcceptLen) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.
%% The argument order is chosen to be more efficient.

token(S0, Ics0, L0, Tcs, Tlen0, Tline, A0, Alen0) ->
    case yystate(S0, Ics0, L0, Tlen0, A0, Alen0) of
        %% Accepting end state, we have a token.
        {A1,Alen1,Ics1,L1} ->
            token_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline));
        %% Accepting transition state, can take more chars.
        {A1,Alen1,[],L1,S1} ->                  % Need more chars to check
            {more,{token,S1,L1,Tcs,Alen1,Tline,A1,Alen1}};
        {A1,Alen1,Ics1,L1,_S1} ->               % Take what we got
            token_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline));
        %% After a non-accepting state, maybe reach accept state later.
        {A1,Alen1,Tlen1,[],L1,S1} ->            % Need more chars to check
            {more,{token,S1,L1,Tcs,Tlen1,Tline,A1,Alen1}};
        {reject,_Alen1,Tlen1,eof,L1,_S1} ->     % No token match
            %% Check for partial token which is error.
            Ret = if Tlen1 > 0 -> {error,{Tline,?MODULE,
                                          %% Skip eof tail in Tcs.
                                          {illegal,yypre(Tcs, Tlen1)}},L1};
                     true -> {eof,L1}
                  end,
            {done,Ret,eof};
        {reject,_Alen1,Tlen1,Ics1,L1,_S1} ->    % No token match
            Error = {Tline,?MODULE,{illegal,yypre(Tcs, Tlen1+1)}},
            {done,{error,Error,L1},Ics1};
        {A1,Alen1,Tlen1,_Ics1,L1,_S1} ->       % Use last accept match
            Tcs1 = yysuf(Tcs, Alen1),
            L2 = adjust_line(Tlen1, Alen1, Tcs1, L1),
            token_cont(Tcs1, L2, yyaction(A1, Alen1, Tcs, Tline))
    end.

%% token_cont(RestChars, Line, Token)
%% If we have a token or error then return done, else if we have a
%% skip_token then continue.

-dialyzer({nowarn_function, token_cont/3}).

token_cont(Rest, Line, {token,T}) ->
    {done,{ok,T,Line},Rest};
token_cont(Rest, Line, {token,T,Push}) ->
    NewRest = Push ++ Rest,
    {done,{ok,T,Line},NewRest};
token_cont(Rest, Line, {end_token,T}) ->
    {done,{ok,T,Line},Rest};
token_cont(Rest, Line, {end_token,T,Push}) ->
    NewRest = Push ++ Rest,
    {done,{ok,T,Line},NewRest};
token_cont(Rest, Line, skip_token) ->
    token(yystate(), Rest, Line, Rest, 0, Line, reject, 0);
token_cont(Rest, Line, {skip_token,Push}) ->
    NewRest = Push ++ Rest,
    token(yystate(), NewRest, Line, NewRest, 0, Line, reject, 0);
token_cont(Rest, Line, {error,S}) ->
    {done,{error,{Line,?MODULE,{user,S}},Line},Rest}.

%% tokens(Continuation, Chars, Line) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.
%% Must be careful when re-entering to append the latest characters to the
%% after characters in an accept. The continuation is:
%% {tokens,State,CurrLine,TokenChars,TokenLen,TokenLine,Tokens,AccAction,AccLen}
%% {skip_tokens,State,CurrLine,TokenChars,TokenLen,TokenLine,Error,AccAction,AccLen}

tokens(Cont, Chars) -> tokens(Cont, Chars, 1).

tokens([], Chars, Line) ->
    tokens(yystate(), Chars, Line, Chars, 0, Line, [], reject, 0);
tokens({tokens,State,Line,Tcs,Tlen,Tline,Ts,Action,Alen}, Chars, _) ->
    tokens(State, Chars, Line, Tcs ++ Chars, Tlen, Tline, Ts, Action, Alen);
tokens({skip_tokens,State,Line,Tcs,Tlen,Tline,Error,Action,Alen}, Chars, _) ->
    skip_tokens(State, Chars, Line, Tcs ++ Chars, Tlen, Tline, Error, Action, Alen).

%% tokens(State, InChars, Line, TokenChars, TokenLen, TokenLine, Tokens,
%% AcceptAction, AcceptLen) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.

tokens(S0, Ics0, L0, Tcs, Tlen0, Tline, Ts, A0, Alen0) ->
    case yystate(S0, Ics0, L0, Tlen0, A0, Alen0) of
        %% Accepting end state, we have a token.
        {A1,Alen1,Ics1,L1} ->
            tokens_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline), Ts);
        %% Accepting transition state, can take more chars.
        {A1,Alen1,[],L1,S1} ->                  % Need more chars to check
            {more,{tokens,S1,L1,Tcs,Alen1,Tline,Ts,A1,Alen1}};
        {A1,Alen1,Ics1,L1,_S1} ->               % Take what we got
            tokens_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline), Ts);
        %% After a non-accepting state, maybe reach accept state later.
        {A1,Alen1,Tlen1,[],L1,S1} ->            % Need more chars to check
            {more,{tokens,S1,L1,Tcs,Tlen1,Tline,Ts,A1,Alen1}};
        {reject,_Alen1,Tlen1,eof,L1,_S1} ->     % No token match
            %% Check for partial token which is error, no need to skip here.
            Ret = if Tlen1 > 0 -> {error,{Tline,?MODULE,
                                          %% Skip eof tail in Tcs.
                                          {illegal,yypre(Tcs, Tlen1)}},L1};
                     Ts == [] -> {eof,L1};
                     true -> {ok,yyrev(Ts),L1}
                  end,
            {done,Ret,eof};
        {reject,_Alen1,Tlen1,_Ics1,L1,_S1} ->
            %% Skip rest of tokens.
            Error = {L1,?MODULE,{illegal,yypre(Tcs, Tlen1+1)}},
            skip_tokens(yysuf(Tcs, Tlen1+1), L1, Error);
        {A1,Alen1,Tlen1,_Ics1,L1,_S1} ->
            Token = yyaction(A1, Alen1, Tcs, Tline),
            Tcs1 = yysuf(Tcs, Alen1),
            L2 = adjust_line(Tlen1, Alen1, Tcs1, L1),
            tokens_cont(Tcs1, L2, Token, Ts)
    end.

%% tokens_cont(RestChars, Line, Token, Tokens)
%% If we have an end_token or error then return done, else if we have
%% a token then save it and continue, else if we have a skip_token
%% just continue.

-dialyzer({nowarn_function, tokens_cont/4}).

tokens_cont(Rest, Line, {token,T}, Ts) ->
    tokens(yystate(), Rest, Line, Rest, 0, Line, [T|Ts], reject, 0);
tokens_cont(Rest, Line, {token,T,Push}, Ts) ->
    NewRest = Push ++ Rest,
    tokens(yystate(), NewRest, Line, NewRest, 0, Line, [T|Ts], reject, 0);
tokens_cont(Rest, Line, {end_token,T}, Ts) ->
    {done,{ok,yyrev(Ts, [T]),Line},Rest};
tokens_cont(Rest, Line, {end_token,T,Push}, Ts) ->
    NewRest = Push ++ Rest,
    {done,{ok,yyrev(Ts, [T]),Line},NewRest};
tokens_cont(Rest, Line, skip_token, Ts) ->
    tokens(yystate(), Rest, Line, Rest, 0, Line, Ts, reject, 0);
tokens_cont(Rest, Line, {skip_token,Push}, Ts) ->
    NewRest = Push ++ Rest,
    tokens(yystate(), NewRest, Line, NewRest, 0, Line, Ts, reject, 0);
tokens_cont(Rest, Line, {error,S}, _Ts) ->
    skip_tokens(Rest, Line, {Line,?MODULE,{user,S}}).

%%skip_tokens(InChars, Line, Error) -> {done,{error,Error,Line},Ics}.
%% Skip tokens until an end token, junk everything and return the error.

skip_tokens(Ics, Line, Error) ->
    skip_tokens(yystate(), Ics, Line, Ics, 0, Line, Error, reject, 0).

%% skip_tokens(State, InChars, Line, TokenChars, TokenLen, TokenLine, Tokens,
%% AcceptAction, AcceptLen) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.

skip_tokens(S0, Ics0, L0, Tcs, Tlen0, Tline, Error, A0, Alen0) ->
    case yystate(S0, Ics0, L0, Tlen0, A0, Alen0) of
        {A1,Alen1,Ics1,L1} ->                  % Accepting end state
            skip_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline), Error);
        {A1,Alen1,[],L1,S1} ->                 % After an accepting state
            {more,{skip_tokens,S1,L1,Tcs,Alen1,Tline,Error,A1,Alen1}};
        {A1,Alen1,Ics1,L1,_S1} ->
            skip_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline), Error);
        {A1,Alen1,Tlen1,[],L1,S1} ->           % After a non-accepting state
            {more,{skip_tokens,S1,L1,Tcs,Tlen1,Tline,Error,A1,Alen1}};
        {reject,_Alen1,_Tlen1,eof,L1,_S1} ->
            {done,{error,Error,L1},eof};
        {reject,_Alen1,Tlen1,_Ics1,L1,_S1} ->
            skip_tokens(yysuf(Tcs, Tlen1+1), L1, Error);
        {A1,Alen1,Tlen1,_Ics1,L1,_S1} ->
            Token = yyaction(A1, Alen1, Tcs, Tline),
            Tcs1 = yysuf(Tcs, Alen1),
            L2 = adjust_line(Tlen1, Alen1, Tcs1, L1),
            skip_cont(Tcs1, L2, Token, Error)
    end.

%% skip_cont(RestChars, Line, Token, Error)
%% Skip tokens until we have an end_token or error then return done
%% with the original rror.

-dialyzer({nowarn_function, skip_cont/4}).

skip_cont(Rest, Line, {token,_T}, Error) ->
    skip_tokens(yystate(), Rest, Line, Rest, 0, Line, Error, reject, 0);
skip_cont(Rest, Line, {token,_T,Push}, Error) ->
    NewRest = Push ++ Rest,
    skip_tokens(yystate(), NewRest, Line, NewRest, 0, Line, Error, reject, 0);
skip_cont(Rest, Line, {end_token,_T}, Error) ->
    {done,{error,Error,Line},Rest};
skip_cont(Rest, Line, {end_token,_T,Push}, Error) ->
    NewRest = Push ++ Rest,
    {done,{error,Error,Line},NewRest};
skip_cont(Rest, Line, skip_token, Error) ->
    skip_tokens(yystate(), Rest, Line, Rest, 0, Line, Error, reject, 0);
skip_cont(Rest, Line, {skip_token,Push}, Error) ->
    NewRest = Push ++ Rest,
    skip_tokens(yystate(), NewRest, Line, NewRest, 0, Line, Error, reject, 0);
skip_cont(Rest, Line, {error,_S}, Error) ->
    skip_tokens(yystate(), Rest, Line, Rest, 0, Line, Error, reject, 0).

-compile({nowarn_unused_function, [yyrev/1, yyrev/2, yypre/2, yysuf/2]}).

yyrev(List) -> lists:reverse(List).
yyrev(List, Tail) -> lists:reverse(List, Tail).
yypre(List, N) -> lists:sublist(List, N).
yysuf(List, N) -> lists:nthtail(N, List).

%% adjust_line(TokenLength, AcceptLength, Chars, Line) -> NewLine
%% Make sure that newlines in Chars are not counted twice.
%% Line has been updated with respect to newlines in the prefix of
%% Chars consisting of (TokenLength - AcceptLength) characters.

-compile({nowarn_unused_function, adjust_line/4}).

adjust_line(N, N, _Cs, L) -> L;
adjust_line(T, A, [$\n|Cs], L) ->
    adjust_line(T-1, A, Cs, L-1);
adjust_line(T, A, [_|Cs], L) ->
    adjust_line(T-1, A, Cs, L).

%% yystate() -> InitialState.
%% yystate(State, InChars, Line, CurrTokLen, AcceptAction, AcceptLen) ->
%% {Action, AcceptLen, RestChars, Line} |
%% {Action, AcceptLen, RestChars, Line, State} |
%% {reject, AcceptLen, CurrTokLen, RestChars, Line, State} |
%% {Action, AcceptLen, CurrTokLen, RestChars, Line, State}.
%% Generated state transition functions. The non-accepting end state
%% return signal either an unrecognised character or end of current
%% input.

-file("src/erlmachine_leex_js.erl", 325).
yystate() -> 89.

yystate(96, [62|Ics], Line, Tlen, _, _) ->
    yystate(88, Ics, Line, Tlen+1, 29, Tlen);
yystate(96, [61|Ics], Line, Tlen, _, _) ->
    yystate(56, Ics, Line, Tlen+1, 29, Tlen);
yystate(96, Ics, Line, Tlen, _, _) ->
    {29,Tlen,Ics,Line,96};
yystate(95, [93|Ics], Line, Tlen, _, _) ->
    yystate(79, Ics, Line, Tlen+1, 61, Tlen);
yystate(95, [C|Ics], Line, Tlen, _, _) when C >= 0, C =< 9 ->
    yystate(71, Ics, Line, Tlen+1, 61, Tlen);
yystate(95, [C|Ics], Line, Tlen, _, _) when C >= 11, C =< 92 ->
    yystate(71, Ics, Line, Tlen+1, 61, Tlen);
yystate(95, [C|Ics], Line, Tlen, _, _) when C >= 94 ->
    yystate(71, Ics, Line, Tlen+1, 61, Tlen);
yystate(95, Ics, Line, Tlen, _, _) ->
    {61,Tlen,Ics,Line,95};
yystate(94, [46|Ics], Line, Tlen, _, _) ->
    yystate(86, Ics, Line, Tlen+1, 15, Tlen);
yystate(94, Ics, Line, Tlen, _, _) ->
    {15,Tlen,Ics,Line,94};
yystate(93, Ics, Line, Tlen, _, _) ->
    {63,Tlen,Ics,Line};
yystate(92, Ics, Line, Tlen, _, _) ->
    {0,Tlen,Ics,Line};
yystate(91, [45|Ics], Line, Tlen, Action, Alen) ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(91, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,91};
yystate(90, Ics, Line, Tlen, _, _) ->
    {12,Tlen,Ics,Line};
yystate(89, [126|Ics], Line, Tlen, Action, Alen) ->
    yystate(81, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [125|Ics], Line, Tlen, Action, Alen) ->
    yystate(73, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [124|Ics], Line, Tlen, Action, Alen) ->
    yystate(65, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [123|Ics], Line, Tlen, Action, Alen) ->
    yystate(41, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [116|Ics], Line, Tlen, Action, Alen) ->
    yystate(33, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [110|Ics], Line, Tlen, Action, Alen) ->
    yystate(1, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [102|Ics], Line, Tlen, Action, Alen) ->
    yystate(30, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [94|Ics], Line, Tlen, Action, Alen) ->
    yystate(58, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [93|Ics], Line, Tlen, Action, Alen) ->
    yystate(74, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [92|Ics], Line, Tlen, Action, Alen) ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [91|Ics], Line, Tlen, Action, Alen) ->
    yystate(82, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [63|Ics], Line, Tlen, Action, Alen) ->
    yystate(90, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [62|Ics], Line, Tlen, Action, Alen) ->
    yystate(96, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [61|Ics], Line, Tlen, Action, Alen) ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [60|Ics], Line, Tlen, Action, Alen) ->
    yystate(16, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [59|Ics], Line, Tlen, Action, Alen) ->
    yystate(51, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [58|Ics], Line, Tlen, Action, Alen) ->
    yystate(43, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [48|Ics], Line, Tlen, Action, Alen) ->
    yystate(12, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [47|Ics], Line, Tlen, Action, Alen) ->
    yystate(68, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [46|Ics], Line, Tlen, Action, Alen) ->
    yystate(94, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [45|Ics], Line, Tlen, Action, Alen) ->
    yystate(70, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [44|Ics], Line, Tlen, Action, Alen) ->
    yystate(50, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [43|Ics], Line, Tlen, Action, Alen) ->
    yystate(42, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [42|Ics], Line, Tlen, Action, Alen) ->
    yystate(18, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [41|Ics], Line, Tlen, Action, Alen) ->
    yystate(5, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [40|Ics], Line, Tlen, Action, Alen) ->
    yystate(13, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [39|Ics], Line, Tlen, Action, Alen) ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [38|Ics], Line, Tlen, Action, Alen) ->
    yystate(21, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [37|Ics], Line, Tlen, Action, Alen) ->
    yystate(45, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [33|Ics], Line, Tlen, Action, Alen) ->
    yystate(61, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [32|Ics], Line, Tlen, Action, Alen) ->
    yystate(85, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [27|Ics], Line, Tlen, Action, Alen) ->
    yystate(85, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [10|Ics], Line, Tlen, Action, Alen) ->
    yystate(85, Ics, Line+1, Tlen+1, Action, Alen);
yystate(89, [9|Ics], Line, Tlen, Action, Alen) ->
    yystate(85, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 0, C =< 8 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 11, C =< 13 ->
    yystate(85, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 14, C =< 26 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 28, C =< 31 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 34, C =< 36 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 49, C =< 57 ->
    yystate(35, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 64, C =< 90 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 95, C =< 101 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 103, C =< 109 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 111, C =< 115 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 117, C =< 122 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, [C|Ics], Line, Tlen, Action, Alen) when C >= 127 ->
    yystate(93, Ics, Line, Tlen+1, Action, Alen);
yystate(89, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,89};
yystate(88, [62|Ics], Line, Tlen, _, _) ->
    yystate(80, Ics, Line, Tlen+1, 25, Tlen);
yystate(88, [61|Ics], Line, Tlen, _, _) ->
    yystate(64, Ics, Line, Tlen+1, 25, Tlen);
yystate(88, Ics, Line, Tlen, _, _) ->
    {25,Tlen,Ics,Line,88};
yystate(87, [93|Ics], Line, Tlen, Action, Alen) ->
    yystate(87, Ics, Line, Tlen+1, Action, Alen);
yystate(87, [62|Ics], Line, Tlen, Action, Alen) ->
    yystate(95, Ics, Line, Tlen+1, Action, Alen);
yystate(87, [C|Ics], Line, Tlen, Action, Alen) when C >= 0, C =< 9 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(87, [C|Ics], Line, Tlen, Action, Alen) when C >= 11, C =< 61 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(87, [C|Ics], Line, Tlen, Action, Alen) when C >= 63, C =< 92 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(87, [C|Ics], Line, Tlen, Action, Alen) when C >= 94 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(87, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,87};
yystate(86, [46|Ics], Line, Tlen, Action, Alen) ->
    yystate(78, Ics, Line, Tlen+1, Action, Alen);
yystate(86, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,86};
yystate(85, [32|Ics], Line, Tlen, _, _) ->
    yystate(85, Ics, Line, Tlen+1, 62, Tlen);
yystate(85, [27|Ics], Line, Tlen, _, _) ->
    yystate(85, Ics, Line, Tlen+1, 62, Tlen);
yystate(85, [9|Ics], Line, Tlen, _, _) ->
    yystate(85, Ics, Line, Tlen+1, 62, Tlen);
yystate(85, [10|Ics], Line, Tlen, _, _) ->
    yystate(85, Ics, Line+1, Tlen+1, 62, Tlen);
yystate(85, [C|Ics], Line, Tlen, _, _) when C >= 11, C =< 13 ->
    yystate(85, Ics, Line, Tlen+1, 62, Tlen);
yystate(85, Ics, Line, Tlen, _, _) ->
    {62,Tlen,Ics,Line,85};
yystate(84, Ics, Line, Tlen, _, _) ->
    {2,Tlen,Ics,Line};
yystate(83, [45|Ics], Line, Tlen, Action, Alen) ->
    yystate(75, Ics, Line, Tlen+1, Action, Alen);
yystate(83, [C|Ics], Line, Tlen, Action, Alen) when C >= 0, C =< 9 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(83, [C|Ics], Line, Tlen, Action, Alen) when C >= 11, C =< 44 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(83, [C|Ics], Line, Tlen, Action, Alen) when C >= 46 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(83, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,83};
yystate(82, Ics, Line, Tlen, _, _) ->
    {3,Tlen,Ics,Line};
yystate(81, Ics, Line, Tlen, _, _) ->
    {20,Tlen,Ics,Line};
yystate(80, [61|Ics], Line, Tlen, _, _) ->
    yystate(72, Ics, Line, Tlen+1, 27, Tlen);
yystate(80, Ics, Line, Tlen, _, _) ->
    {27,Tlen,Ics,Line,80};
yystate(79, [93|Ics], Line, Tlen, Action, Alen) ->
    yystate(87, Ics, Line, Tlen+1, Action, Alen);
yystate(79, [C|Ics], Line, Tlen, Action, Alen) when C >= 0, C =< 9 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(79, [C|Ics], Line, Tlen, Action, Alen) when C >= 11, C =< 92 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(79, [C|Ics], Line, Tlen, Action, Alen) when C >= 94 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(79, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,79};
yystate(78, Ics, Line, Tlen, _, _) ->
    {14,Tlen,Ics,Line};
yystate(77, Ics, Line, Tlen, _, _) ->
    {35,Tlen,Ics,Line};
yystate(76, Ics, Line, Tlen, _, _) ->
    {42,Tlen,Ics,Line};
yystate(75, [62|Ics], Line, Tlen, Action, Alen) ->
    yystate(67, Ics, Line, Tlen+1, Action, Alen);
yystate(75, [45|Ics], Line, Tlen, Action, Alen) ->
    yystate(75, Ics, Line, Tlen+1, Action, Alen);
yystate(75, [C|Ics], Line, Tlen, Action, Alen) when C >= 0, C =< 9 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(75, [C|Ics], Line, Tlen, Action, Alen) when C >= 11, C =< 44 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(75, [C|Ics], Line, Tlen, Action, Alen) when C >= 46, C =< 61 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(75, [C|Ics], Line, Tlen, Action, Alen) when C >= 63 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(75, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,75};
yystate(74, Ics, Line, Tlen, _, _) ->
    {4,Tlen,Ics,Line};
yystate(73, Ics, Line, Tlen, _, _) ->
    {8,Tlen,Ics,Line};
yystate(72, Ics, Line, Tlen, _, _) ->
    {48,Tlen,Ics,Line};
yystate(71, [93|Ics], Line, Tlen, Action, Alen) ->
    yystate(79, Ics, Line, Tlen+1, Action, Alen);
yystate(71, [C|Ics], Line, Tlen, Action, Alen) when C >= 0, C =< 9 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(71, [C|Ics], Line, Tlen, Action, Alen) when C >= 11, C =< 92 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(71, [C|Ics], Line, Tlen, Action, Alen) when C >= 94 ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(71, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,71};
yystate(70, [61|Ics], Line, Tlen, _, _) ->
    yystate(62, Ics, Line, Tlen+1, 19, Tlen);
yystate(70, [45|Ics], Line, Tlen, _, _) ->
    yystate(54, Ics, Line, Tlen+1, 19, Tlen);
yystate(70, Ics, Line, Tlen, _, _) ->
    {19,Tlen,Ics,Line,70};
yystate(69, [61|Ics], Line, Tlen, _, _) ->
    yystate(77, Ics, Line, Tlen+1, 33, Tlen);
yystate(69, Ics, Line, Tlen, _, _) ->
    {33,Tlen,Ics,Line,69};
yystate(68, [61|Ics], Line, Tlen, _, _) ->
    yystate(76, Ics, Line, Tlen+1, 23, Tlen);
yystate(68, [47|Ics], Line, Tlen, _, _) ->
    yystate(84, Ics, Line, Tlen+1, 23, Tlen);
yystate(68, [42|Ics], Line, Tlen, _, _) ->
    yystate(92, Ics, Line, Tlen+1, 23, Tlen);
yystate(68, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,68};
yystate(67, [45|Ics], Line, Tlen, _, _) ->
    yystate(83, Ics, Line, Tlen+1, 60, Tlen);
yystate(67, [C|Ics], Line, Tlen, _, _) when C >= 0, C =< 9 ->
    yystate(59, Ics, Line, Tlen+1, 60, Tlen);
yystate(67, [C|Ics], Line, Tlen, _, _) when C >= 11, C =< 44 ->
    yystate(59, Ics, Line, Tlen+1, 60, Tlen);
yystate(67, [C|Ics], Line, Tlen, _, _) when C >= 46 ->
    yystate(59, Ics, Line, Tlen+1, 60, Tlen);
yystate(67, Ics, Line, Tlen, _, _) ->
    {60,Tlen,Ics,Line,67};
yystate(66, Ics, Line, Tlen, _, _) ->
    {50,Tlen,Ics,Line};
yystate(65, [124|Ics], Line, Tlen, _, _) ->
    yystate(57, Ics, Line, Tlen+1, 38, Tlen);
yystate(65, [61|Ics], Line, Tlen, _, _) ->
    yystate(49, Ics, Line, Tlen+1, 38, Tlen);
yystate(65, Ics, Line, Tlen, _, _) ->
    {38,Tlen,Ics,Line,65};
yystate(64, Ics, Line, Tlen, _, _) ->
    {47,Tlen,Ics,Line};
yystate(63, [91|Ics], Line, Tlen, Action, Alen) ->
    yystate(71, Ics, Line, Tlen+1, Action, Alen);
yystate(63, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,63};
yystate(62, Ics, Line, Tlen, _, _) ->
    {45,Tlen,Ics,Line};
yystate(61, [61|Ics], Line, Tlen, _, _) ->
    yystate(69, Ics, Line, Tlen+1, 21, Tlen);
yystate(61, Ics, Line, Tlen, _, _) ->
    {21,Tlen,Ics,Line,61};
yystate(60, [48|Ics], Line, Tlen, _, _) ->
    yystate(60, Ics, Line, Tlen+1, 58, Tlen);
yystate(60, [49|Ics], Line, Tlen, _, _) ->
    yystate(60, Ics, Line, Tlen+1, 58, Tlen);
yystate(60, Ics, Line, Tlen, _, _) ->
    {58,Tlen,Ics,Line,60};
yystate(59, [45|Ics], Line, Tlen, Action, Alen) ->
    yystate(83, Ics, Line, Tlen+1, Action, Alen);
yystate(59, [C|Ics], Line, Tlen, Action, Alen) when C >= 0, C =< 9 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(59, [C|Ics], Line, Tlen, Action, Alen) when C >= 11, C =< 44 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(59, [C|Ics], Line, Tlen, Action, Alen) when C >= 46 ->
    yystate(59, Ics, Line, Tlen+1, Action, Alen);
yystate(59, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,59};
yystate(58, [61|Ics], Line, Tlen, _, _) ->
    yystate(66, Ics, Line, Tlen+1, 37, Tlen);
yystate(58, Ics, Line, Tlen, _, _) ->
    {37,Tlen,Ics,Line,58};
yystate(57, Ics, Line, Tlen, _, _) ->
    {40,Tlen,Ics,Line};
yystate(56, Ics, Line, Tlen, _, _) ->
    {31,Tlen,Ics,Line};
yystate(55, [65|Ics], Line, Tlen, Action, Alen) ->
    yystate(63, Ics, Line, Tlen+1, Action, Alen);
yystate(55, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,55};
yystate(54, Ics, Line, Tlen, _, _) ->
    {17,Tlen,Ics,Line};
yystate(53, Ics, Line, Tlen, _, _) ->
    {43,Tlen,Ics,Line};
yystate(52, [48|Ics], Line, Tlen, Action, Alen) ->
    yystate(60, Ics, Line, Tlen+1, Action, Alen);
yystate(52, [49|Ics], Line, Tlen, Action, Alen) ->
    yystate(60, Ics, Line, Tlen+1, Action, Alen);
yystate(52, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,52};
yystate(51, Ics, Line, Tlen, _, _) ->
    {9,Tlen,Ics,Line};
yystate(50, Ics, Line, Tlen, _, _) ->
    {10,Tlen,Ics,Line};
yystate(49, Ics, Line, Tlen, _, _) ->
    {51,Tlen,Ics,Line};
yystate(48, [62|Ics], Line, Tlen, _, _) ->
    yystate(40, Ics, Line, Tlen+1, 11, Tlen);
yystate(48, [61|Ics], Line, Tlen, _, _) ->
    yystate(32, Ics, Line, Tlen+1, 11, Tlen);
yystate(48, Ics, Line, Tlen, _, _) ->
    {11,Tlen,Ics,Line,48};
yystate(47, [84|Ics], Line, Tlen, Action, Alen) ->
    yystate(55, Ics, Line, Tlen+1, Action, Alen);
yystate(47, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,47};
yystate(46, [115|Ics], Line, Tlen, Action, Alen) ->
    yystate(17, Ics, Line, Tlen+1, Action, Alen);
yystate(46, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,46};
yystate(45, [61|Ics], Line, Tlen, _, _) ->
    yystate(53, Ics, Line, Tlen+1, 24, Tlen);
yystate(45, Ics, Line, Tlen, _, _) ->
    {24,Tlen,Ics,Line,45};
yystate(44, [C|Ics], Line, Tlen, _, _) when C >= 48, C =< 55 ->
    yystate(44, Ics, Line, Tlen+1, 59, Tlen);
yystate(44, Ics, Line, Tlen, _, _) ->
    {59,Tlen,Ics,Line,44};
yystate(43, Ics, Line, Tlen, _, _) ->
    {13,Tlen,Ics,Line};
yystate(42, [61|Ics], Line, Tlen, _, _) ->
    yystate(34, Ics, Line, Tlen+1, 18, Tlen);
yystate(42, [43|Ics], Line, Tlen, _, _) ->
    yystate(26, Ics, Line, Tlen+1, 18, Tlen);
yystate(42, Ics, Line, Tlen, _, _) ->
    {18,Tlen,Ics,Line,42};
yystate(41, Ics, Line, Tlen, _, _) ->
    {7,Tlen,Ics,Line};
yystate(40, Ics, Line, Tlen, _, _) ->
    {52,Tlen,Ics,Line};
yystate(39, [65|Ics], Line, Tlen, Action, Alen) ->
    yystate(47, Ics, Line, Tlen+1, Action, Alen);
yystate(39, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,39};
yystate(38, [108|Ics], Line, Tlen, Action, Alen) ->
    yystate(46, Ics, Line, Tlen+1, Action, Alen);
yystate(38, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,38};
yystate(37, Ics, Line, Tlen, _, _) ->
    {39,Tlen,Ics,Line};
yystate(36, [C|Ics], Line, Tlen, Action, Alen) when C >= 48, C =< 55 ->
    yystate(44, Ics, Line, Tlen+1, Action, Alen);
yystate(36, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,36};
yystate(35, [46|Ics], Line, Tlen, _, _) ->
    yystate(27, Ics, Line, Tlen+1, 56, Tlen);
yystate(35, [C|Ics], Line, Tlen, _, _) when C >= 49, C =< 57 ->
    yystate(35, Ics, Line, Tlen+1, 56, Tlen);
yystate(35, Ics, Line, Tlen, _, _) ->
    {56,Tlen,Ics,Line,35};
yystate(34, Ics, Line, Tlen, _, _) ->
    {44,Tlen,Ics,Line};
yystate(33, [114|Ics], Line, Tlen, _, _) ->
    yystate(25, Ics, Line, Tlen+1, 63, Tlen);
yystate(33, Ics, Line, Tlen, _, _) ->
    {63,Tlen,Ics,Line,33};
yystate(32, [61|Ics], Line, Tlen, _, _) ->
    yystate(24, Ics, Line, Tlen+1, 32, Tlen);
yystate(32, Ics, Line, Tlen, _, _) ->
    {32,Tlen,Ics,Line,32};
yystate(31, [68|Ics], Line, Tlen, Action, Alen) ->
    yystate(39, Ics, Line, Tlen+1, Action, Alen);
yystate(31, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,31};
yystate(30, [97|Ics], Line, Tlen, _, _) ->
    yystate(38, Ics, Line, Tlen+1, 63, Tlen);
yystate(30, Ics, Line, Tlen, _, _) ->
    {63,Tlen,Ics,Line,30};
yystate(29, Ics, Line, Tlen, _, _) ->
    {49,Tlen,Ics,Line};
yystate(28, [C|Ics], Line, Tlen, _, _) when C >= 48, C =< 57 ->
    yystate(28, Ics, Line, Tlen+1, 57, Tlen);
yystate(28, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 70 ->
    yystate(28, Ics, Line, Tlen+1, 57, Tlen);
yystate(28, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 102 ->
    yystate(28, Ics, Line, Tlen+1, 57, Tlen);
yystate(28, Ics, Line, Tlen, _, _) ->
    {57,Tlen,Ics,Line,28};
yystate(27, [C|Ics], Line, Tlen, Action, Alen) when C >= 48, C =< 57 ->
    yystate(19, Ics, Line, Tlen+1, Action, Alen);
yystate(27, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,27};
yystate(26, Ics, Line, Tlen, _, _) ->
    {16,Tlen,Ics,Line};
yystate(25, [117|Ics], Line, Tlen, Action, Alen) ->
    yystate(17, Ics, Line, Tlen+1, Action, Alen);
yystate(25, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,25};
yystate(24, Ics, Line, Tlen, _, _) ->
    {34,Tlen,Ics,Line};
yystate(23, [67|Ics], Line, Tlen, Action, Alen) ->
    yystate(31, Ics, Line, Tlen+1, Action, Alen);
yystate(23, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,23};
yystate(22, Ics, Line, Tlen, _, _) ->
    {53,Tlen,Ics,Line};
yystate(21, [61|Ics], Line, Tlen, _, _) ->
    yystate(29, Ics, Line, Tlen+1, 36, Tlen);
yystate(21, [38|Ics], Line, Tlen, _, _) ->
    yystate(37, Ics, Line, Tlen+1, 36, Tlen);
yystate(21, Ics, Line, Tlen, _, _) ->
    {36,Tlen,Ics,Line,21};
yystate(20, [C|Ics], Line, Tlen, Action, Alen) when C >= 48, C =< 57 ->
    yystate(28, Ics, Line, Tlen+1, Action, Alen);
yystate(20, [C|Ics], Line, Tlen, Action, Alen) when C >= 65, C =< 70 ->
    yystate(28, Ics, Line, Tlen+1, Action, Alen);
yystate(20, [C|Ics], Line, Tlen, Action, Alen) when C >= 97, C =< 102 ->
    yystate(28, Ics, Line, Tlen+1, Action, Alen);
yystate(20, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,20};
yystate(19, [101|Ics], Line, Tlen, _, _) ->
    yystate(11, Ics, Line, Tlen+1, 55, Tlen);
yystate(19, [69|Ics], Line, Tlen, _, _) ->
    yystate(11, Ics, Line, Tlen+1, 55, Tlen);
yystate(19, [C|Ics], Line, Tlen, _, _) when C >= 48, C =< 57 ->
    yystate(19, Ics, Line, Tlen+1, 55, Tlen);
yystate(19, Ics, Line, Tlen, _, _) ->
    {55,Tlen,Ics,Line,19};
yystate(18, [61|Ics], Line, Tlen, _, _) ->
    yystate(10, Ics, Line, Tlen+1, 22, Tlen);
yystate(18, [47|Ics], Line, Tlen, _, _) ->
    yystate(2, Ics, Line, Tlen+1, 22, Tlen);
yystate(18, Ics, Line, Tlen, _, _) ->
    {22,Tlen,Ics,Line,18};
yystate(17, [101|Ics], Line, Tlen, Action, Alen) ->
    yystate(9, Ics, Line, Tlen+1, Action, Alen);
yystate(17, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,17};
yystate(16, [61|Ics], Line, Tlen, _, _) ->
    yystate(8, Ics, Line, Tlen+1, 28, Tlen);
yystate(16, [60|Ics], Line, Tlen, _, _) ->
    yystate(0, Ics, Line, Tlen+1, 28, Tlen);
yystate(16, [33|Ics], Line, Tlen, _, _) ->
    yystate(15, Ics, Line, Tlen+1, 28, Tlen);
yystate(16, Ics, Line, Tlen, _, _) ->
    {28,Tlen,Ics,Line,16};
yystate(15, [91|Ics], Line, Tlen, Action, Alen) ->
    yystate(23, Ics, Line, Tlen+1, Action, Alen);
yystate(15, [45|Ics], Line, Tlen, Action, Alen) ->
    yystate(91, Ics, Line, Tlen+1, Action, Alen);
yystate(15, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,15};
yystate(14, [108|Ics], Line, Tlen, Action, Alen) ->
    yystate(22, Ics, Line, Tlen+1, Action, Alen);
yystate(14, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,14};
yystate(13, Ics, Line, Tlen, _, _) ->
    {5,Tlen,Ics,Line};
yystate(12, [120|Ics], Line, Tlen, _, _) ->
    yystate(20, Ics, Line, Tlen+1, 56, Tlen);
yystate(12, [111|Ics], Line, Tlen, _, _) ->
    yystate(36, Ics, Line, Tlen+1, 56, Tlen);
yystate(12, [98|Ics], Line, Tlen, _, _) ->
    yystate(52, Ics, Line, Tlen+1, 56, Tlen);
yystate(12, [88|Ics], Line, Tlen, _, _) ->
    yystate(20, Ics, Line, Tlen+1, 56, Tlen);
yystate(12, [79|Ics], Line, Tlen, _, _) ->
    yystate(36, Ics, Line, Tlen+1, 56, Tlen);
yystate(12, [66|Ics], Line, Tlen, _, _) ->
    yystate(52, Ics, Line, Tlen+1, 56, Tlen);
yystate(12, [46|Ics], Line, Tlen, _, _) ->
    yystate(27, Ics, Line, Tlen+1, 56, Tlen);
yystate(12, Ics, Line, Tlen, _, _) ->
    {56,Tlen,Ics,Line,12};
yystate(11, [45|Ics], Line, Tlen, Action, Alen) ->
    yystate(3, Ics, Line, Tlen+1, Action, Alen);
yystate(11, [43|Ics], Line, Tlen, Action, Alen) ->
    yystate(3, Ics, Line, Tlen+1, Action, Alen);
yystate(11, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,11};
yystate(10, Ics, Line, Tlen, _, _) ->
    {41,Tlen,Ics,Line};
yystate(9, Ics, Line, Tlen, _, _) ->
    {54,Tlen,Ics,Line};
yystate(8, Ics, Line, Tlen, _, _) ->
    {30,Tlen,Ics,Line};
yystate(7, Ics, Line, Tlen, _, _) ->
    {46,Tlen,Ics,Line};
yystate(6, [108|Ics], Line, Tlen, Action, Alen) ->
    yystate(14, Ics, Line, Tlen+1, Action, Alen);
yystate(6, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,6};
yystate(5, Ics, Line, Tlen, _, _) ->
    {6,Tlen,Ics,Line};
yystate(4, [C|Ics], Line, Tlen, _, _) when C >= 49, C =< 57 ->
    yystate(4, Ics, Line, Tlen+1, 55, Tlen);
yystate(4, Ics, Line, Tlen, _, _) ->
    {55,Tlen,Ics,Line,4};
yystate(3, [C|Ics], Line, Tlen, Action, Alen) when C >= 49, C =< 57 ->
    yystate(4, Ics, Line, Tlen+1, Action, Alen);
yystate(3, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,3};
yystate(2, Ics, Line, Tlen, _, _) ->
    {1,Tlen,Ics,Line};
yystate(1, [117|Ics], Line, Tlen, _, _) ->
    yystate(6, Ics, Line, Tlen+1, 63, Tlen);
yystate(1, Ics, Line, Tlen, _, _) ->
    {63,Tlen,Ics,Line,1};
yystate(0, [61|Ics], Line, Tlen, _, _) ->
    yystate(7, Ics, Line, Tlen+1, 26, Tlen);
yystate(0, Ics, Line, Tlen, _, _) ->
    {26,Tlen,Ics,Line,0};
yystate(S, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,S}.

%% yyaction(Action, TokenLength, TokenChars, TokenLine) ->
%% {token,Token} | {end_token, Token} | skip_token | {error,String}.
%% Generated action function.

yyaction(0, _, _, TokenLine) ->
    yyaction_0(TokenLine);
yyaction(1, _, _, TokenLine) ->
    yyaction_1(TokenLine);
yyaction(2, _, _, TokenLine) ->
    yyaction_2(TokenLine);
yyaction(3, _, _, TokenLine) ->
    yyaction_3(TokenLine);
yyaction(4, _, _, TokenLine) ->
    yyaction_4(TokenLine);
yyaction(5, _, _, TokenLine) ->
    yyaction_5(TokenLine);
yyaction(6, _, _, TokenLine) ->
    yyaction_6(TokenLine);
yyaction(7, _, _, TokenLine) ->
    yyaction_7(TokenLine);
yyaction(8, _, _, TokenLine) ->
    yyaction_8(TokenLine);
yyaction(9, _, _, TokenLine) ->
    yyaction_9(TokenLine);
yyaction(10, _, _, TokenLine) ->
    yyaction_10(TokenLine);
yyaction(11, _, _, TokenLine) ->
    yyaction_11(TokenLine);
yyaction(12, _, _, TokenLine) ->
    yyaction_12(TokenLine);
yyaction(13, _, _, TokenLine) ->
    yyaction_13(TokenLine);
yyaction(14, _, _, TokenLine) ->
    yyaction_14(TokenLine);
yyaction(15, _, _, TokenLine) ->
    yyaction_15(TokenLine);
yyaction(16, _, _, TokenLine) ->
    yyaction_16(TokenLine);
yyaction(17, _, _, TokenLine) ->
    yyaction_17(TokenLine);
yyaction(18, _, _, TokenLine) ->
    yyaction_18(TokenLine);
yyaction(19, _, _, TokenLine) ->
    yyaction_19(TokenLine);
yyaction(20, _, _, TokenLine) ->
    yyaction_20(TokenLine);
yyaction(21, _, _, TokenLine) ->
    yyaction_21(TokenLine);
yyaction(22, _, _, TokenLine) ->
    yyaction_22(TokenLine);
yyaction(23, _, _, TokenLine) ->
    yyaction_23(TokenLine);
yyaction(24, _, _, TokenLine) ->
    yyaction_24(TokenLine);
yyaction(25, _, _, TokenLine) ->
    yyaction_25(TokenLine);
yyaction(26, _, _, TokenLine) ->
    yyaction_26(TokenLine);
yyaction(27, _, _, TokenLine) ->
    yyaction_27(TokenLine);
yyaction(28, _, _, TokenLine) ->
    yyaction_28(TokenLine);
yyaction(29, _, _, TokenLine) ->
    yyaction_29(TokenLine);
yyaction(30, _, _, TokenLine) ->
    yyaction_30(TokenLine);
yyaction(31, _, _, TokenLine) ->
    yyaction_31(TokenLine);
yyaction(32, _, _, TokenLine) ->
    yyaction_32(TokenLine);
yyaction(33, _, _, TokenLine) ->
    yyaction_33(TokenLine);
yyaction(34, _, _, TokenLine) ->
    yyaction_34(TokenLine);
yyaction(35, _, _, TokenLine) ->
    yyaction_35(TokenLine);
yyaction(36, _, _, TokenLine) ->
    yyaction_36(TokenLine);
yyaction(37, _, _, TokenLine) ->
    yyaction_37(TokenLine);
yyaction(38, _, _, TokenLine) ->
    yyaction_38(TokenLine);
yyaction(39, _, _, TokenLine) ->
    yyaction_39(TokenLine);
yyaction(40, _, _, TokenLine) ->
    yyaction_40(TokenLine);
yyaction(41, _, _, TokenLine) ->
    yyaction_41(TokenLine);
yyaction(42, _, _, TokenLine) ->
    yyaction_42(TokenLine);
yyaction(43, _, _, TokenLine) ->
    yyaction_43(TokenLine);
yyaction(44, _, _, TokenLine) ->
    yyaction_44(TokenLine);
yyaction(45, _, _, TokenLine) ->
    yyaction_45(TokenLine);
yyaction(46, _, _, TokenLine) ->
    yyaction_46(TokenLine);
yyaction(47, _, _, TokenLine) ->
    yyaction_47(TokenLine);
yyaction(48, _, _, TokenLine) ->
    yyaction_48(TokenLine);
yyaction(49, _, _, TokenLine) ->
    yyaction_49(TokenLine);
yyaction(50, _, _, TokenLine) ->
    yyaction_50(TokenLine);
yyaction(51, _, _, TokenLine) ->
    yyaction_51(TokenLine);
yyaction(52, _, _, TokenLine) ->
    yyaction_52(TokenLine);
yyaction(53, _, _, TokenLine) ->
    yyaction_53(TokenLine);
yyaction(54, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_54(TokenChars, TokenLine);
yyaction(55, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_55(TokenChars, TokenLine);
yyaction(56, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_56(TokenChars, TokenLine);
yyaction(57, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_57(TokenChars, TokenLine);
yyaction(58, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_58(TokenChars, TokenLine);
yyaction(59, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_59(TokenChars, TokenLine);
yyaction(60, _, _, _) ->
    yyaction_60();
yyaction(61, _, _, _) ->
    yyaction_61();
yyaction(62, _, _, _) ->
    yyaction_62();
yyaction(63, _, _, _) ->
    yyaction_63();
yyaction(_, _, _, _) -> error.

-compile({inline,yyaction_0/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 90).
yyaction_0(TokenLine) ->
     operator ('/*', TokenLine) .

-compile({inline,yyaction_1/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 91).
yyaction_1(TokenLine) ->
     operator ('*/', TokenLine) .

-compile({inline,yyaction_2/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 92).
yyaction_2(TokenLine) ->
     operator ('//', TokenLine) .

-compile({inline,yyaction_3/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 94).
yyaction_3(TokenLine) ->
     operator ('[', TokenLine) .

-compile({inline,yyaction_4/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 95).
yyaction_4(TokenLine) ->
     operator (']', TokenLine) .

-compile({inline,yyaction_5/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 96).
yyaction_5(TokenLine) ->
     operator ('(', TokenLine) .

-compile({inline,yyaction_6/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 97).
yyaction_6(TokenLine) ->
     operator (')', TokenLine) .

-compile({inline,yyaction_7/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 98).
yyaction_7(TokenLine) ->
     operator ('{', TokenLine) .

-compile({inline,yyaction_8/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 99).
yyaction_8(TokenLine) ->
     operator ('}', TokenLine) .

-compile({inline,yyaction_9/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 100).
yyaction_9(TokenLine) ->
     operator (';', TokenLine) .

-compile({inline,yyaction_10/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 101).
yyaction_10(TokenLine) ->
     operator (',', TokenLine) .

-compile({inline,yyaction_11/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 102).
yyaction_11(TokenLine) ->
     operator ('=', TokenLine) .

-compile({inline,yyaction_12/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 103).
yyaction_12(TokenLine) ->
     operator ('?', TokenLine) .

-compile({inline,yyaction_13/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 104).
yyaction_13(TokenLine) ->
     operator (':', TokenLine) .

-compile({inline,yyaction_14/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 105).
yyaction_14(TokenLine) ->
     operator ('...', TokenLine) .

-compile({inline,yyaction_15/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 106).
yyaction_15(TokenLine) ->
     operator ('.', TokenLine) .

-compile({inline,yyaction_16/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 107).
yyaction_16(TokenLine) ->
     operator ('++', TokenLine) .

-compile({inline,yyaction_17/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 108).
yyaction_17(TokenLine) ->
     operator ('--', TokenLine) .

-compile({inline,yyaction_18/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 109).
yyaction_18(TokenLine) ->
     operator ('+', TokenLine) .

-compile({inline,yyaction_19/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 110).
yyaction_19(TokenLine) ->
     operator ('-', TokenLine) .

-compile({inline,yyaction_20/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 111).
yyaction_20(TokenLine) ->
     operator ('~', TokenLine) .

-compile({inline,yyaction_21/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 112).
yyaction_21(TokenLine) ->
     operator ('!', TokenLine) .

-compile({inline,yyaction_22/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 113).
yyaction_22(TokenLine) ->
     operator ('*', TokenLine) .

-compile({inline,yyaction_23/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 114).
yyaction_23(TokenLine) ->
     operator ('/', TokenLine) .

-compile({inline,yyaction_24/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 115).
yyaction_24(TokenLine) ->
     operator ('%', TokenLine) .

-compile({inline,yyaction_25/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 116).
yyaction_25(TokenLine) ->
     operator ('>>', TokenLine) .

-compile({inline,yyaction_26/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 117).
yyaction_26(TokenLine) ->
     operator ('<<', TokenLine) .

-compile({inline,yyaction_27/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 118).
yyaction_27(TokenLine) ->
     operator ('>>>', TokenLine) .

-compile({inline,yyaction_28/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 119).
yyaction_28(TokenLine) ->
     operator ('<', TokenLine) .

-compile({inline,yyaction_29/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 120).
yyaction_29(TokenLine) ->
     operator ('>', TokenLine) .

-compile({inline,yyaction_30/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 121).
yyaction_30(TokenLine) ->
     operator ('<=', TokenLine) .

-compile({inline,yyaction_31/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 122).
yyaction_31(TokenLine) ->
     operator ('>=', TokenLine) .

-compile({inline,yyaction_32/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 123).
yyaction_32(TokenLine) ->
     operator ('==', TokenLine) .

-compile({inline,yyaction_33/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 124).
yyaction_33(TokenLine) ->
     operator ('!=', TokenLine) .

-compile({inline,yyaction_34/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 125).
yyaction_34(TokenLine) ->
     operator ('===', TokenLine) .

-compile({inline,yyaction_35/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 126).
yyaction_35(TokenLine) ->
     operator ('!==', TokenLine) .

-compile({inline,yyaction_36/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 127).
yyaction_36(TokenLine) ->
     operator ('&', TokenLine) .

-compile({inline,yyaction_37/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 128).
yyaction_37(TokenLine) ->
     operator ('^', TokenLine) .

-compile({inline,yyaction_38/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 129).
yyaction_38(TokenLine) ->
     operator ('|', TokenLine) .

-compile({inline,yyaction_39/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 130).
yyaction_39(TokenLine) ->
     operator ('&&', TokenLine) .

-compile({inline,yyaction_40/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 131).
yyaction_40(TokenLine) ->
     operator ('||', TokenLine) .

-compile({inline,yyaction_41/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 132).
yyaction_41(TokenLine) ->
     operator ('*=', TokenLine) .

-compile({inline,yyaction_42/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 133).
yyaction_42(TokenLine) ->
     operator ('/=', TokenLine) .

-compile({inline,yyaction_43/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 134).
yyaction_43(TokenLine) ->
     operator ('%=', TokenLine) .

-compile({inline,yyaction_44/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 135).
yyaction_44(TokenLine) ->
     operator ('+=', TokenLine) .

-compile({inline,yyaction_45/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 136).
yyaction_45(TokenLine) ->
     operator ('-=', TokenLine) .

-compile({inline,yyaction_46/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 137).
yyaction_46(TokenLine) ->
     operator ('<<=', TokenLine) .

-compile({inline,yyaction_47/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 138).
yyaction_47(TokenLine) ->
     operator ('>>=', TokenLine) .

-compile({inline,yyaction_48/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 139).
yyaction_48(TokenLine) ->
     operator ('>>>=', TokenLine) .

-compile({inline,yyaction_49/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 140).
yyaction_49(TokenLine) ->
     operator ('&=', TokenLine) .

-compile({inline,yyaction_50/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 141).
yyaction_50(TokenLine) ->
     operator ('^=', TokenLine) .

-compile({inline,yyaction_51/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 142).
yyaction_51(TokenLine) ->
     operator ('|=', TokenLine) .

-compile({inline,yyaction_52/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 143).
yyaction_52(TokenLine) ->
     operator ('=>', TokenLine) .

-compile({inline,yyaction_53/1}).
-file("src/compiler/erlmachine_leex_js.xrl", 145).
yyaction_53(TokenLine) ->
     null (TokenLine) .

-compile({inline,yyaction_54/2}).
-file("src/compiler/erlmachine_leex_js.xrl", 147).
yyaction_54(TokenChars, TokenLine) ->
     bool (TokenChars, TokenLine) .

-compile({inline,yyaction_55/2}).
-file("src/compiler/erlmachine_leex_js.xrl", 149).
yyaction_55(TokenChars, TokenLine) ->
     float (TokenChars, TokenLine) .

-compile({inline,yyaction_56/2}).
-file("src/compiler/erlmachine_leex_js.xrl", 151).
yyaction_56(TokenChars, TokenLine) ->
     integer (TokenChars, TokenLine) .

-compile({inline,yyaction_57/2}).
-file("src/compiler/erlmachine_leex_js.xrl", 153).
yyaction_57(TokenChars, TokenLine) ->
     hexinteger (TokenChars, TokenLine) .

-compile({inline,yyaction_58/2}).
-file("src/compiler/erlmachine_leex_js.xrl", 154).
yyaction_58(TokenChars, TokenLine) ->
     binaryinteger (TokenChars, TokenLine) .

-compile({inline,yyaction_59/2}).
-file("src/compiler/erlmachine_leex_js.xrl", 155).
yyaction_59(TokenChars, TokenLine) ->
     octalinteger (TokenChars, TokenLine) .

-compile({inline,yyaction_60/0}).
-file("src/compiler/erlmachine_leex_js.xrl", 157).
yyaction_60() ->
     skip () .

-compile({inline,yyaction_61/0}).
-file("src/compiler/erlmachine_leex_js.xrl", 158).
yyaction_61() ->
     skip () .

-compile({inline,yyaction_62/0}).
-file("src/compiler/erlmachine_leex_js.xrl", 160).
yyaction_62() ->
     skip () .

-compile({inline,yyaction_63/0}).
-file("src/compiler/erlmachine_leex_js.xrl", 162).
yyaction_63() ->
     skip () .

-file("/usr/local/Cellar/erlang/22.0.2/lib/erlang/lib/parsetools-2.1.8/include/leexinc.hrl", 313).
